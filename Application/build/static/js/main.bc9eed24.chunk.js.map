{"version":3,"sources":["Config.js","AttachmentCard.js","MessageCard.js","MessageCardList.js","GraphService.js","UrlUtil.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","isDebug","appId","redirectUri","scopes","AttachmentCard","key","this","props","attachment","id","JSON","stringify","contentType","contentUrl","content","name","thumbnailUrl","Component","MessageCard","Date","parse","message","createdDateTime","toLocaleDateString","replyToId","etag","messageType","lastModifiedDateTime","deletedDateTime","subject","summary","importance","locale","webUrl","policyViolation","from","application","device","conversation","user","displayName","userIdentityType","body","dangerouslySetInnerHTML","__html","attachments","map","MessageCardList","messages","graph","require","getAuthenticatedClient","accessToken","Client","init","authProvider","done","getUserDetails","a","async","client","api","get","getJoinedTeams","teams","getTeam","teamId","getChannel","channelId","channels","getChannelsOfTeam","getMessagesOfChannel","getRepliesOfMessage","messageId","postMessage","messageText","endpoint","requestParams","post","console","log","getUsers","users","getQueryParams","search","params","substring","split","forEach","param","s","App","onTreeAction","node","action","onTreeNodeToggle","currentNode","signout","userAgentApplication","logout","Notify","type","config","String","date","toastId","getTime","toast","info","success","warn","error","state","chatMessageText","columnsMessageTable","title","field","editable","columnsUserTable","isAuthenticated","isDropdownTreeSelectDisabled","selected","channel","description","team","teamName","ReadGraphData","bind","ReadGraphMessagesData","ReadGraphTeamsData","signin","onTreeChange","postChatMessage","UserAgentApplication","auth","clientId","cache","cacheLocation","storeAuthStateInCookie","getAccount","getUserProfile","login","userRetry","window","location","loaded","localStorage","getItem","setState","selectedNodes","length","splitedvalue","value","splitedLabel","label","msal","acquireTokenSilent","channelName","gotTeam","gotChannel","gotmessages","i","len","r","replies","force","gotusers","gotTeams","children","desc","gotChannels","j","l","v","push","valuesToSave","setItem","fileName","lineNumber","loginPopup","prompt","usr","email","mail","userPrincipalName","rel","href","Button","variant","onClick","data","disabled","mode","onChange","onAction","onNodeToggle","texts","placeholder","e","Object","assign","target","actions","icon","tooltip","event","rowData","columns","options","pageSize","sorting","hideProgressBar","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc9eed24.chunk.js","sourcesContent":["module.exports = {\n  isDebug: true,\n  appId: '6414a7d4-1f29-41f0-b246-3c9d1fedad32',\n  redirectUri: 'http://localhost:3000',\n  scopes: [\n    \"chat.readwrite\",\n    \"group.readwrite.all\",\n    \"groupmember.readwrite.all\",\n    \"user.readwrite.all\",\n  ]\n};","import React, { Component } from 'react'\r\n\r\nclass AttachmentCard extends Component {\r\n    render() {\r\n        return (\r\n            <li key={this.props.attachment.id}>\r\n                {' '}\r\n                {JSON.stringify(this.props.attachment)}\r\n\r\n                {this.props.attachment.id}{' '}\r\n                {this.props.attachment.contentType}{' '}\r\n                {this.props.attachment.contentUrl}{' '}\r\n                {this.props.attachment.content ? this.props.attachment.content : ''}{' '}\r\n                {this.props.attachment.name}{' '}\r\n                {this.props.attachment.thumbnailUrl ? this.props.attachment.thumbnailUrl : ''}{' '}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AttachmentCard","import React, { Component } from \"react\";\r\nimport AttachmentCard from \"./AttachmentCard\";\r\n\r\nclass MessageCard extends Component {\r\n  render() {\r\n    return (\r\n      <li>\r\n        {new Date(\r\n          Date.parse(this.props.message.createdDateTime)\r\n        ).toLocaleDateString()}{\" \"}\r\n        {JSON.stringify(this.props.message)}\r\n        {this.props.message.id}{\" \"}\r\n        {this.props.message.replyToId ? this.props.message.replyToId : \"\"}{\" \"}\r\n        {this.props.message.etag} {this.props.message.messageType}{\" \"}\r\n        {new Date(\r\n          Date.parse(this.props.message.createdDateTime)\r\n        ).toLocaleDateString()}\r\n        {this.props.message.lastModifiedDateTime\r\n          ? new Date(\r\n              Date.parse(this.props.message.lastModifiedDateTime)\r\n            ).toLocaleDateString()\r\n          : \"\"}\r\n        {this.props.message.deletedDateTime\r\n          ? new Date(\r\n              Date.parse(this.props.message.deletedDateTime)\r\n            ).toLocaleDateString()\r\n          : \"\"}\r\n        {this.props.message.subject ? this.props.message.subject : \"\"}{\" \"}\r\n        {this.props.message.summary ? this.props.message.summary : \"\"}{\" \"}\r\n        {this.props.message.importance} {this.props.message.locale}{\" \"}\r\n        {this.props.message.webUrl}{\" \"}\r\n        {this.props.message.policyViolation\r\n          ? this.props.message.policyViolation\r\n          : \"\"}{\" \"}\r\n        {(() => {\r\n          if (this.props.message.from) {\r\n            if (this.props.message.from.application) {\r\n              return <div>{this.props.message.from.application} </div>;\r\n            }\r\n            if (this.props.message.from.device) {\r\n              return <div>{this.props.message.from.device} </div>;\r\n            }\r\n            if (this.props.message.from.conversation) {\r\n              return <div>{this.props.message.from.conversation} </div>;\r\n            }\r\n            if (this.props.message.from.user) {\r\n              return (\r\n                <div>\r\n                  {this.props.message.from.user.id}{\" \"}\r\n                  {this.props.message.from.user.displayName}{\" \"}\r\n                  {this.props.message.from.user.userIdentityType}{\" \"}\r\n                </div>\r\n              );\r\n            }\r\n          }\r\n        })()}\r\n        {(() => {\r\n          if (this.props.message.body) {\r\n            const content = this.props.message.body.content;\r\n            if (this.props.message.body.contentType === \"html\") {\r\n              return (\r\n                <div>\r\n                  {this.props.message.body.contentType}{\" \"}\r\n                  <div dangerouslySetInnerHTML={{ __html: content }} />{\" \"}\r\n                </div>\r\n              );\r\n            } else {\r\n              return (\r\n                <div>\r\n                  {this.props.message.body.contentType} {content}{\" \"}\r\n                </div>\r\n              );\r\n            }\r\n          }\r\n        })()}\r\n        <ul>\r\n          {(() => {\r\n            if (this.props.message.attachments) {\r\n              this.props.message.attachments.map(attachment => {\r\n                return (\r\n                  <AttachmentCard attachment={attachment}></AttachmentCard>\r\n                );\r\n              });\r\n            }\r\n          })()}\r\n        </ul>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageCard;\r\n","import React, { Component } from \"react\";\r\nimport MessageCard from \"./MessageCard\";\r\n\r\nclass MessageCardList extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.messages.map(message => {\r\n          return <MessageCard key={message.id} message={message}></MessageCard>;\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageCardList;\r\n","var graph = require(\"@microsoft/microsoft-graph-client\");\n\nfunction getAuthenticatedClient(accessToken) {\n  // Initialize Graph client\n  const client = graph.Client.init({\n    // Use the provided access token to authenticate\n    // requests\n    authProvider: done => {\n      done(null, accessToken.accessToken);\n    }\n  });\n\n  return client;\n}\n\nexport async function getUserDetails(accessToken) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const user = await client.api(\"/me\").get();\n  return user;\n}\n\nexport async function getJoinedTeams(accessToken) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const teams = await client.api(\"/me/joinedTeams\").get();\n  // console.log('teams');\n  // console.log(teams);\n  return teams;\n}\n\nexport async function getTeam(accessToken, teamId) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const teams = await client.api(\"/teams/\" + teamId).get();\n  // console.log('teams');\n  // console.log(teams);\n  return teams;\n}\n\nexport async function getMembersOfTeam(accessToken, teamId) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const members = await client.api(\"/groups/\" + teamId + \"/members\").get();\n  // console.log('members');\n  // console.log(members);\n  return members;\n}\n\nexport async function getChannel(accessToken, teamId, channelId) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const channels = await client\n    .api(\"/teams/\" + teamId + \"/channels/\" + channelId)\n    .get();\n  // console.log('channels');\n  // console.log(channels);\n  return channels;\n}\n\nexport async function getChannelsOfTeam(accessToken, teamId) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const channels = await client.api(\"/teams/\" + teamId + \"/channels\").get();\n  // console.log('channels');\n  // console.log(channels);\n  return channels;\n}\n\nexport async function getMessagesOfChannel(accessToken, teamId, channelId) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const messages = await client\n    .api(\n      \"https://graph.microsoft.com/beta/teams/\" +\n        teamId +\n        \"/channels/\" +\n        channelId +\n        \"/messages?$top=50\"\n    )\n    .get();\n  // console.log('messages');\n  // console.log(messages);\n  return messages;\n}\n\nexport async function getRepliesOfMessage(\n  accessToken,\n  teamId,\n  channelId,\n  messageId\n) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const messages = await client\n    .api(\n      \"https://graph.microsoft.com/beta/teams/\" +\n        teamId +\n        \"/channels/\" +\n        channelId +\n        \"/messages/\" +\n        messageId +\n        \"/replies\"\n    )\n    .get();\n  // console.log('messages');\n  // console.log(messages);\n  return messages;\n}\n\nexport async function postMessage(\n  accessToken,\n  teamId,\n  channelId,\n  messageId,\n  messageText\n) {\n  const client = getAuthenticatedClient(accessToken);\n\n  var endpoint =\n    \"https://graph.microsoft.com/beta/teams/\" +\n    teamId +\n    \"/channels/\" +\n    channelId +\n    \"/messages\";\n  if (messageId) {\n    endpoint += \"/\" + messageId + \"/replies\";\n  }\n  const requestParams = {\n    body: {\n      content: messageText\n    }\n  };\n\n  const message = await client.api(endpoint).post(requestParams);\n  console.log(\"message\");\n  console.log(message);\n  return message;\n}\n\nexport async function getUsers(accessToken) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const users = await client\n    .api(\"/users\")\n    //.select('businessPhones,displayName,givenName,id,jobTitle,mail,mobilePhone,officeLocation,preferredLanguage,surname,userPrincipalName')\n    // .orderby('internalId DESC')\n    .get();\n\n  // console.log(users)\n  return users;\n}\n","export function getQueryParams(search) {\r\n  let params = {};\r\n  if (search) {\r\n    search = search.substring(1); // 先頭の?を除去\r\n\r\n    search.split(\"&\").forEach(param => {\r\n      const s = param.split(\"=\");\r\n      params = {\r\n        ...params,\r\n        [s[0]]: s[1]\r\n      };\r\n    });\r\n  }\r\n  console.log(\"params\");\r\n  console.log(params);\r\n  return params;\r\n}\r\n","import { UserAgentApplication } from \"msal\";\r\nimport config from \"./Config\";\r\nimport MessageCardList from \"./MessageCardList\";\r\nimport {\r\n  getChannel,\r\n  getChannelsOfTeam,\r\n  getJoinedTeams,\r\n  getMessagesOfChannel,\r\n  getRepliesOfMessage,\r\n  getTeam,\r\n  getUserDetails,\r\n  getUsers,\r\n  postMessage\r\n} from \"./GraphService\";\r\nimport { getQueryParams } from \"./UrlUtil\";\r\n\r\n// yarn add @material-ui/core\r\n// yarn add @material-ui/icons\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// yarn add react-json-tree\r\nimport JSONTree from \"react-json-tree\";\r\n\r\n// yarn add react-dropdown-tree-select\r\nimport DropdownTreeSelect from \"react-dropdown-tree-select\";\r\nimport \"react-dropdown-tree-select/dist/styles.css\";\r\n\r\n// yarn add material-table\r\nimport React, { Component } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\n\r\n// yarn add react-toastify\r\n// import React, { Component } from 'react';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (config.isDebug) {\r\n      console.log(\"isDebug\");\r\n    }\r\n\r\n    this.state = {\r\n      channels: [],\r\n      chatMessageText: \"\",\r\n      columnsMessageTable: [\r\n        {\r\n          title: \"ID\",\r\n          field: \"id\",\r\n          editable: \"never\"\r\n        },\r\n        {\r\n          title: \"DisplayName\",\r\n          field: \"from.user.displayName\",\r\n          editable: \"never\"\r\n        },\r\n        {\r\n          title: \"Content\",\r\n          field: \"body.content\"\r\n        },\r\n        {\r\n          title: \"createdDateTime\",\r\n          field: \"createdDateTime\",\r\n          editable: \"never\"\r\n        }\r\n      ],\r\n      columnsUserTable: [\r\n        {\r\n          title: \"ID\",\r\n          field: \"id\",\r\n          editable: \"never\"\r\n        },\r\n        {\r\n          title: \"DisplayName\",\r\n          field: \"displayName\"\r\n        },\r\n        {\r\n          title: \"userPrincipalName\",\r\n          field: \"userPrincipalName\"\r\n        },\r\n        {\r\n          title: \"mobilePhone\",\r\n          field: \"mobilePhone\"\r\n        }\r\n      ],\r\n      isAuthenticated: false,\r\n      isDropdownTreeSelectDisabled: false,\r\n      messages: [],\r\n      selected: {\r\n        channel: {\r\n          description: \"\",\r\n          id: \"\",\r\n          name: \"\"\r\n        },\r\n        message: { id: \"\" },\r\n        team: {\r\n          description: \"\",\r\n          id: \"\",\r\n          teamName: \"\"\r\n        }\r\n      },\r\n      user: {},\r\n      users: []\r\n    };\r\n\r\n    if (config.isDebug) {\r\n      console.log(\"this.state\");\r\n      console.log(this.state);\r\n    }\r\n\r\n    this.ReadGraphData = this.ReadGraphData.bind(this);\r\n    this.ReadGraphMessagesData = this.ReadGraphMessagesData.bind(this);\r\n    this.ReadGraphTeamsData = this.ReadGraphTeamsData.bind(this);\r\n    this.signin = this.signin.bind(this);\r\n    this.signout = this.signout.bind(this);\r\n    this.Notify = this.Notify.bind(this);\r\n    this.onTreeChange = this.onTreeChange.bind(this);\r\n    this.onTreeAction = this.onTreeAction.bind(this);\r\n    this.onTreeNodeToggle = this.onTreeNodeToggle.bind(this);\r\n    this.postChatMessage = this.postChatMessage.bind(this);\r\n\r\n    // let signedInUser = this.signin();\r\n    // if (null != signedInUser) {\r\n    //   this.ReadGraphData();\r\n    // }\r\n  }\r\n\r\n  async signin() {\r\n    this.userAgentApplication = new UserAgentApplication({\r\n      auth: {\r\n        clientId: config.appId\r\n      },\r\n      cache: {\r\n        cacheLocation: \"localStorage\",\r\n        storeAuthStateInCookie: true\r\n      }\r\n    });\r\n    if (config.isDebug) {\r\n      console.log(\"this.userAgentApplication\");\r\n      console.log(this.userAgentApplication);\r\n    }\r\n\r\n    var user = await this.userAgentApplication.getAccount();\r\n    if (config.isDebug) {\r\n      console.log(\"user\");\r\n      console.log(user);\r\n    }\r\n\r\n    if (user) {\r\n      // Enhance user object with data from Graph\r\n      console.log(\"if (user)\");\r\n      await this.getUserProfile();\r\n      return user;\r\n    } else {\r\n      console.log(\"if (!user)\");\r\n      await this.login();\r\n      console.log(\"if (!user) login()\");\r\n      var userRetry = await this.userAgentApplication.getAccount();\r\n      if (config.isDebug) {\r\n        console.log(\"if (!user) login() userRetry\");\r\n        console.log(userRetry);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async ReadGraphData() {\r\n    const params = await getQueryParams(window.location.search);\r\n\r\n    // forceパラメータがある場合は強制的にサーバから情報取得\r\n    if (params[\"force\"]) {\r\n      console.log(\"this.ReadGraphTeamsData(true)\");\r\n      await this.ReadGraphTeamsData(true);\r\n      return;\r\n    }\r\n\r\n    if (params[\"teamId\"] && params[\"channelId\"]) {\r\n      if (config.isDebug) {\r\n        console.log('params[\"teamId\"]');\r\n        console.log(params[\"teamId\"]);\r\n        console.log('params[\"channelId\"]');\r\n        console.log(params[\"channelId\"]);\r\n\r\n        console.log(\r\n          \"this.ReadGraphMessagesData();this.ReadGraphTeamsData(false)\"\r\n        );\r\n      }\r\n      this.ReadGraphMessagesData(params[\"teamId\"], \"\", params[\"channelId\"], \"\");\r\n      await this.ReadGraphTeamsData(false);\r\n      return;\r\n    }\r\n\r\n    const loaded = localStorage.getItem(\"state\");\r\n    if (loaded) {\r\n      if (config.isDebug) {\r\n        console.log(\"loaded\");\r\n        console.log(loaded);\r\n        console.log(JSON.parse(loaded));\r\n      }\r\n\r\n      this.setState(JSON.parse(loaded));\r\n    }\r\n\r\n    if (config.isDebug) {\r\n      console.log(\"this.ReadGraphTeamsData(false)\");\r\n    }\r\n    await this.ReadGraphTeamsData(false);\r\n  }\r\n\r\n  async onTreeChange(currentNode, selectedNodes) {\r\n    if (config.isDebug) {\r\n      console.log(\"onTreeChange:\", currentNode, selectedNodes);\r\n    }\r\n    if (selectedNodes.length === 1 && selectedNodes[0][\"_depth\"] === 2) {\r\n      var splitedvalue = selectedNodes[0].value.split(\"/\");\r\n      var splitedLabel = selectedNodes[0].label.split(\"/\");\r\n      if (config.isDebug) {\r\n        console.log(\r\n          \"onTreeChange:\",\r\n          this.state.selected.team.id,\r\n          splitedvalue[0],\r\n          this.state.selected.channel.id,\r\n          splitedvalue[1]\r\n        );\r\n      }\r\n      if (\r\n        this.state.selected.team.id !== splitedvalue[0] ||\r\n        this.state.selected.channel.id !== splitedvalue[1]\r\n      ) {\r\n        if (config.isDebug) {\r\n          console.log(\r\n            \"表示するチャネル:\",\r\n            splitedvalue[0],\r\n            splitedLabel[0],\r\n            splitedvalue[1],\r\n            splitedLabel[1]\r\n          );\r\n        }\r\n        await this.ReadGraphMessagesData(\r\n          splitedvalue[0],\r\n          splitedLabel[0],\r\n          splitedvalue[1],\r\n          splitedLabel[1]\r\n        );\r\n      }\r\n      return;\r\n    }\r\n  }\r\n\r\n  onTreeAction = (node, action) => {\r\n    console.log(\"onTreeAction:\", action, node);\r\n  };\r\n\r\n  onTreeNodeToggle = currentNode => {\r\n    console.log(\"onTreeNodeToggle:\", currentNode);\r\n  };\r\n\r\n  async postChatMessage() {\r\n    if (this.state.chatMessageText) {\r\n      console.log(this.state.chatMessageText);\r\n\r\n      // Get the user's accessr token\r\n      var accessToken = await window.msal.acquireTokenSilent({\r\n        scopes: config.scopes\r\n      });\r\n\r\n      postMessage(\r\n        accessToken,\r\n        this.state.selected.team.id,\r\n        this.state.selected.channel.id,\r\n        \"undefined\" != typeof this.state.selected.message &&\r\n          \"undefined\" != typeof this.state.selected.message.id\r\n          ? this.state.selected.message.id\r\n          : \"\",\r\n        this.state.chatMessageText ? this.state.chatMessageText : \"\"\r\n      );\r\n    }\r\n  }\r\n\r\n  signout = () => {\r\n    this.userAgentApplication.logout();\r\n  };\r\n\r\n  Notify = (type, message) => {\r\n    if (config.isDebug) {\r\n      console.log(\"Notify(\" + String(type) + \", \" + String(message) + \")\");\r\n    }\r\n\r\n    var date = new Date();\r\n    if (config.isDebug) {\r\n      console.log(\"date\");\r\n      console.log(date);\r\n    }\r\n    var toastId = date.getTime(); // UNIXTIME(msec)\r\n    if (config.isDebug) {\r\n      console.log(\"toastId\");\r\n      console.log(toastId);\r\n    }\r\n\r\n    switch (type) {\r\n      case \"info\":\r\n        toast.info(message, {\r\n          toastId: toastId\r\n        });\r\n        break;\r\n      case \"success\":\r\n        toast.success(message, {\r\n          toastId: toastId\r\n        });\r\n        break;\r\n      case \"warning\":\r\n        toast.warn(message, {\r\n          toastId: toastId\r\n        });\r\n        break;\r\n      case \"error\":\r\n        toast.error(message, {\r\n          toastId: toastId\r\n        });\r\n        break;\r\n      default:\r\n        toast(message, {\r\n          toastId: toastId\r\n        });\r\n        break;\r\n    }\r\n  };\r\n\r\n  async ReadGraphMessagesData(teamId, teamName, channelId, channelName) {\r\n    if (config.isDebug) {\r\n      console.log(\"ReadGraphMessagesData()\");\r\n    }\r\n\r\n    this.setState({\r\n      isDropdownTreeSelectDisabled: true\r\n    });\r\n\r\n    // Get the user's accessr token\r\n    var accessToken = await window.msal.acquireTokenSilent({\r\n      scopes: config.scopes\r\n    });\r\n\r\n    if (teamName === \"\" || channelName === \"\") {\r\n      var gotTeam = await getTeam(accessToken, teamId);\r\n      console.log(\"gotTeam\");\r\n      console.log(gotTeam);\r\n      teamName = gotTeam.displayName;\r\n\r\n      var gotChannel = await getChannel(accessToken, teamId, channelId);\r\n      console.log(\"gotChannel\");\r\n      console.log(gotChannel);\r\n      channelName = gotChannel.displayName;\r\n    }\r\n\r\n    var gotmessages = await getMessagesOfChannel(\r\n      accessToken,\r\n      teamId,\r\n      channelId\r\n    );\r\n    if (config.isDebug) {\r\n      console.log(\"gotmessages\");\r\n      console.log(gotmessages);\r\n    }\r\n\r\n    for (let i = 0, len = gotmessages.value.length; i < len; ++i) {\r\n      var r = await getRepliesOfMessage(\r\n        accessToken,\r\n        teamId,\r\n        channelId,\r\n        gotmessages.value[i].id\r\n      );\r\n      if (config.isDebug) {\r\n        console.log(\"gotmessages i:\" + String(i) + \" r.value:\", r.value);\r\n      }\r\n      gotmessages.value[i].replies = r.value;\r\n\r\n      this.setState({\r\n        messages: gotmessages.value\r\n      });\r\n    }\r\n    this.setState({\r\n      selected: {\r\n        channel: {\r\n          id: channelId,\r\n          name: channelName\r\n        },\r\n        team: {\r\n          id: teamId,\r\n          name: teamName\r\n        }\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      isDropdownTreeSelectDisabled: false\r\n    });\r\n  }\r\n\r\n  async ReadGraphTeamsData(force = false) {\r\n    if (config.isDebug) {\r\n      console.log(\"ReadGraphTeamsData(\" + String(force) + \")\");\r\n    }\r\n\r\n    try {\r\n      // Get the user's access token\r\n      var accessToken = await window.msal.acquireTokenSilent({\r\n        scopes: config.scopes\r\n      });\r\n\r\n      // Get users\r\n      if (force || !this.state.users || 0 === this.state.users.length) {\r\n        var gotusers = await getUsers(accessToken);\r\n        if (config.isDebug) {\r\n          console.log(\"gotusers\");\r\n          console.log(gotusers);\r\n        }\r\n\r\n        // Update the array of users in state\r\n        this.setState({\r\n          users: gotusers.value\r\n        });\r\n\r\n        this.Notify(\"success\", \"[Graph API]ユーザー読込みが完了しました。\");\r\n      }\r\n      if (config.isDebug) {\r\n        console.log(\"this.state.users\");\r\n        console.log(this.state.users);\r\n      }\r\n\r\n      if (force || !this.state.teams || 0 === this.state.teams.length) {\r\n        var gotTeams = await getJoinedTeams(accessToken);\r\n        if (config.isDebug) {\r\n          console.log(\"gotTeams.value\");\r\n          console.log(gotTeams.value);\r\n        }\r\n        this.setState({\r\n          teams: gotTeams.value\r\n        });\r\n\r\n        this.Notify(\"success\", \"[Graph API]チーム読込みが完了しました。\");\r\n      }\r\n      if (config.isDebug) {\r\n        console.log(\"this.state.teams\");\r\n        console.log(this.state.teams);\r\n      }\r\n\r\n      if (force || !this.state.channels || 0 === this.state.channels.length) {\r\n        const channels = {\r\n          label: \"Channels\",\r\n          value: \"Channels\",\r\n          children: []\r\n        };\r\n        for (let i = 0, len = this.state.teams.length; i < len; ++i) {\r\n          var team = this.state.teams[i]; // {};\r\n          if (config.isDebug) {\r\n            console.log(\"i: \" + String(i) + \" team:\" + this.state.teams[i].id);\r\n          }\r\n          team.desc = this.state.teams[i].description;\r\n          team.label = this.state.teams[i].displayName;\r\n          team.value = this.state.teams[i].id;\r\n          team.children = [];\r\n          var gotChannels = await getChannelsOfTeam(\r\n            accessToken,\r\n            this.state.teams[i].id\r\n          );\r\n          for (let j = 0, len = gotChannels.value.length; j < len; ++j) {\r\n            const l =\r\n              this.state.teams[i].displayName +\r\n              \"/\" +\r\n              gotChannels.value[j].displayName;\r\n            const v = this.state.teams[i].id + \"/\" + gotChannels.value[j].id;\r\n            var channel = gotChannels.value[j]; // {};\r\n            channel.desc = this.state.teams[i].description;\r\n            channel.label = l;\r\n            channel.value = v;\r\n            team.children.push(channel);\r\n          }\r\n          channels.children.push(team);\r\n          this.setState({\r\n            channels: channels\r\n          });\r\n        }\r\n      }\r\n      if (config.isDebug) {\r\n        console.log(\"this.state.channels\");\r\n        console.log(this.state.channels);\r\n      }\r\n\r\n      if (config.isDebug) {\r\n        console.log(\"localStorage.setItem\");\r\n        console.log(\"JSON.stringify(this.state)\");\r\n        console.log(JSON.stringify(this.state));\r\n        console.log(\"JSON.stringify(valuesToSave)\");\r\n      }\r\n      const valuesToSave = {\r\n        channels: this.state.channels,\r\n        teams: this.state.teams,\r\n        users: this.state.users\r\n      };\r\n      // localStorage.setItem(\"state\", JSON.stringify(this.state));\r\n      localStorage.setItem(\"state\", JSON.stringify(valuesToSave));\r\n\r\n      if (config.isDebug) {\r\n        console.log(JSON.stringify(valuesToSave));\r\n      }\r\n\r\n      this.Notify(\"success\", \"[Graph API]チャネル読込みが完了しました。\");\r\n    } catch (err) {\r\n      if (config.isDebug) {\r\n        console.log(\"ReadGraphTeamsData() err\");\r\n        console.log(err);\r\n      }\r\n\r\n      this.Notify(\r\n        \"error\",\r\n        `エラーが発生しました: ${err.message} : ${err.fileName} : ${err.lineNumber}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async login() {\r\n    if (config.isDebug) {\r\n      console.log(\"login()\");\r\n    }\r\n\r\n    try {\r\n      await this.userAgentApplication.loginPopup({\r\n        scopes: config.scopes,\r\n        prompt: \"select_account\"\r\n      });\r\n      await this.getUserProfile();\r\n    } catch (err) {\r\n      if (config.isDebug) {\r\n        console.log(\"login() err\");\r\n        console.log(err);\r\n      }\r\n      this.setState({\r\n        isAuthenticated: false,\r\n        user: {}\r\n      });\r\n      this.Notify(\r\n        \"error\",\r\n        `エラーが発生しました: ${err.message} : ${err.fileName} : ${err.lineNumber}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async logout() {\r\n    if (config.isDebug) {\r\n      console.log(\"logout()\");\r\n    }\r\n\r\n    await this.userAgentApplication.logout();\r\n  }\r\n\r\n  async getUserProfile() {\r\n    if (config.isDebug) {\r\n      console.log(\"getUserProfile()\");\r\n    }\r\n\r\n    try {\r\n      // Get the access token silently\r\n      // If the cache contains a non-expired token, this function\r\n      // will just return the cached token. Otherwise, it will\r\n      // make a request to the Azure OAuth endpoint to get a token\r\n\r\n      var accessToken = await this.userAgentApplication.acquireTokenSilent({\r\n        scopes: config.scopes\r\n      });\r\n\r\n      if (accessToken) {\r\n        // Get the user's profile from Graph\r\n        var usr = await getUserDetails(accessToken);\r\n        console.log(\"usr\");\r\n        console.log(usr);\r\n        this.setState({\r\n          isAuthenticated: true,\r\n          user: {\r\n            displayName: usr.displayName,\r\n            email: usr.mail || usr.userPrincipalName\r\n          }\r\n        });\r\n        console.log(\"setState\");\r\n      }\r\n    } catch (err) {\r\n      this.setState({\r\n        isAuthenticated: false,\r\n        user: null\r\n      });\r\n      this.Notify(\r\n        \"error\",\r\n        `エラーが発生しました: ${err.message} : ${err.fileName} : ${err.lineNumber}`\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n        ></link>\r\n        <div>\r\n          {(() => {\r\n            if (this.state.isAuthenticated) {\r\n              return (\r\n                <div>\r\n                  ようこそ、{this.state.user.displayName} (\r\n                  {this.state.user.email})さん{\"   \"}\r\n                  <Button variant=\"contained\" onClick={this.signout}>\r\n                    サインアウト{\" \"}\r\n                  </Button>\r\n                </div>\r\n              );\r\n            }\r\n          })()}{\" \"}\r\n        </div>{\" \"}\r\n        {(() => {\r\n          if (this.state.channels) {\r\n            return (\r\n              <div>\r\n                <div>\r\n                  <div>\r\n                    <DropdownTreeSelect\r\n                      data={this.state.channels}\r\n                      disabled={this.state.isDropdownTreeSelectDisabled}\r\n                      mode=\"radioSelect\"\r\n                      onChange={this.onTreeChange}\r\n                      onAction={this.onTreeAction}\r\n                      onNodeToggle={this.onTreeNodeToggle}\r\n                      texts={{ placeholder: \"Select a Channel...\" }}\r\n                    />\r\n                    {this.state.selected\r\n                      ? (this.state.selected.team\r\n                          ? (this.state.selected.team.name\r\n                              ? this.state.selected.team.name\r\n                              : \"\") +\r\n                            \" \" +\r\n                            (this.state.selected.team.id\r\n                              ? \"( \" + this.state.selected.team.id + \" )\"\r\n                              : \"\")\r\n                          : \"\") +\r\n                        (this.state.selected.channel\r\n                          ? (this.state.selected.channel.name\r\n                              ? \" / \" + this.state.selected.channel.name\r\n                              : \"\") +\r\n                            \" \" +\r\n                            (this.state.selected.channel.id\r\n                              ? \"( \" + this.state.selected.channel.id + \" )\"\r\n                              : \"\")\r\n                          : \"\")\r\n                      : \"\"}{\" \"}\r\n                  </div>\r\n                  <div>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"messageId\"\r\n                      placeholder=\"messageId\"\r\n                      value={\r\n                        this.state.selected.message\r\n                          ? this.state.selected.message.id\r\n                          : \"\"\r\n                      }\r\n                      onChange={e => {\r\n                        let s = Object.assign({}, this.state);\r\n                        s[\"selected\"][\"message\"] = {\r\n                          id: e.target.value\r\n                        };\r\n                        this.setState(s);\r\n                      }}\r\n                    />\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"chatMessageText\"\r\n                      placeholder=\"chatMessageText\"\r\n                      value={this.state.chatMessageText}\r\n                      onChange={e =>\r\n                        this.setState({ chatMessageText: e.target.value })\r\n                      }\r\n                    />\r\n                    <button onClick={this.postChatMessage}>Post</button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n        })()}{\" \"}\r\n        {(() => {\r\n          if (this.state.messages) {\r\n            return (\r\n              <MessageCardList messages={this.state.messages}></MessageCardList>\r\n            );\r\n          }\r\n        })()}{\" \"}\r\n        {(() => {\r\n          if (this.state.messages) {\r\n            return (\r\n              <MaterialTable\r\n                actions={[\r\n                  {\r\n                    icon: \"reply\",\r\n                    tooltip: \"\",\r\n                    onClick: (event, rowData) => {\r\n                      console.log(\"onClick()\", rowData);\r\n                      let s = Object.assign({}, this.state);\r\n                      s[\"selected\"][\"message\"] = {\r\n                        id: rowData.id\r\n                      };\r\n                      this.setState(s);\r\n                    }\r\n                  }\r\n                ]}\r\n                title=\"React-GraphApi-MSTeams\"\r\n                columns={this.state.columnsMessageTable}\r\n                data={this.state.messages}\r\n                options={{\r\n                  pageSize: 20,\r\n                  sorting: true\r\n                }}\r\n              />\r\n            );\r\n          }\r\n        })()}{\" \"}\r\n        {(() => {\r\n          if (this.state.messages) {\r\n            return <JSONTree data={this.state.messages} />;\r\n          }\r\n        })()}{\" \"}\r\n        {(() => {\r\n          if (this.state.channels) {\r\n            return <JSONTree data={this.state.channels} />;\r\n          }\r\n        })()}{\" \"}\r\n        {(() => {\r\n          if (this.state.teams) {\r\n            return <JSONTree data={this.state.teams} />;\r\n          }\r\n        })()}{\" \"}\r\n        <MaterialTable\r\n          title=\"React-GraphApi-MSTeams\"\r\n          columns={this.state.columnsUserTable}\r\n          data={this.state.users}\r\n          options={{\r\n            pageSize: 20,\r\n            sorting: true\r\n          }}\r\n        />{\" \"}\r\n        <ToastContainer hideProgressBar />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}